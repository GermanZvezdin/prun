#!/usr/bin/env python
import sys
import socket
import json
import getopt
import time

MASTER_HOST = 'localhost'
MASTER_PORT = 5557
ADMIN_VERSION = '0.1'
COMMAND = ''


def exit(msg):
    print(msg)
    print("exiting...")
    sys.exit(1)


class Connection():
    def __init__(self):
        print("connecting to master %s:%d" % (MASTER_HOST, MASTER_PORT))
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.connect((MASTER_HOST, MASTER_PORT))
            self.rpc_id = 0
            print("connected")
        except Exception as e:
            Exit("couldn't connect to master")

    def _make_json_rpc(self, msg):
        rpc = {"jsonrpc": "2.0", "method": msg["method"],
               "params": msg["params"], "id": str(self.rpc_id)}
        self.rpc_id += 1
        return json.JSONEncoder().encode(rpc)

    def send(self, msg):
        rpc = self._make_json_rpc(msg)
        try:
            self.socket.send(rpc.encode("utf-8"))
        except Exception as e:
            Exit("couldn't send command to master")

        msg = self._receive()
        self._on_response(msg)
        sys.stdout.flush()

    def _receive(self):
        try:
            data = self.socket.recv(32 * 1024)
            return data
        except Exception as e:
            print(e)

    def _on_response(self, msg):
        if msg is None or len(msg) == 0:
            return
        try:
            msg = msg.decode("utf-8")
            rpc = json.JSONDecoder().decode(msg)

            if 'result' in rpc:
                print(rpc['result'])
            elif 'error' in rpc:
                print(rpc['error'])
        except Exception as e:
            print(e)

    def close(self):
        try:
            self.socket.shutdown(socket.SHUT_RDWR)
            self.socket.close()
        except Exception as e:
            print(e)


class Command_Run():
    def prepare(self, cmd):
        try:
            params = cmd.split()[1:]
            path = params[0]
            if len(params) > 1:
                alias = params[1]
            else:
                alias = ''
        except Exception as e:
            print("no file path given")
            raise e
        return {"method": "run", "params": {"file": path, "alias": alias}}


class Command_Stop():
    def prepare(self, cmd):
        try:
            jobId = cmd.split()[1]
        except Exception as e:
            print("invalid jobId argument")
            raise e
        return {"method": "stop", "params": {"job_id": jobId}}


class Command_StopGroup():
    def prepare(self, cmd):
        try:
            groupId = int(cmd.split()[1])
        except Exception as e:
            print("invalid groupId argument")
            raise e
        return {"method": "stop_group", "params": {"group_id": groupId}}


class Command_StopAll():
    def prepare(self, cmd):
        return {"method": "stop_all", "params": []}


class Command_AddHosts():
    def prepare(self, cmd):
        try:
            hosts = cmd.split()[1:]
            if len(hosts) % 2 > 0:
                raise Exception("Odd number of args")
        except Exception as e:
            print("invalid <host, group> arguments")
            raise e
        return {"method": "add_hosts", "params": {"hosts": hosts}}


class Command_DeleteHosts():
    def prepare(self, cmd):
        try:
            hosts = cmd.split()[1:]
        except Exception as e:
            print("invalid host argument")
            raise e
        return {"method": "delete_hosts", "params": {"hosts": hosts}}


class Command_AddHostGroup():
    def prepare(self, cmd):
        try:
            path = cmd.split()[1]
        except Exception as e:
            print("no file path given")
            raise e
        return {"method": "add_group", "params": {"file": path}}


class Command_DeleteHostGroup():
    def prepare(self, cmd):
        try:
            group = cmd.split()[1]
        except Exception as e:
            print("invalid groupName argument")
            raise e
        return {"method": "delete_group", "params": {"group": group}}


class Command_Info():
    def prepare(self, cmd):
        try:
            jobId = int(cmd.split()[1])
        except Exception as e:
            print("invalid jobId argument")
            raise e
        return {"method": "info", "params": {"job_id": jobId}}


class Command_Stat():
    def prepare(self, cmd):
        return {"method": "stat", "params": []}


class Command_Jobs():
    def prepare(self, cmd):
        return {"method": "jobs", "params": []}


class Command_Ls():
    def prepare(self, cmd):
        return {"method": "ls", "params": []}


class Command_Cron():
    def prepare(self, cmd):
        return {"method": "cron", "params": []}


class Command_Sleep():
    def execute(self, cmd):
        try:
            s = int(cmd.split()[1])
            time.sleep(s)
        except Exception as e:
            print("invalid sleep time argument")
            raise e


class CommandDispatcher():
    _instance = None

    def __init__(self):
        self.map_ = {'run': Command_Run(),
                     'stop': Command_Stop(),
                     'stopg': Command_StopGroup(),
                     'stopall': Command_StopAll(),
                     'add': Command_AddHosts(),
                     'delete': Command_DeleteHosts(),
                     'addg': Command_AddHostGroup(),
                     'deleteg': Command_DeleteHostGroup(),
                     'info': Command_Info(),
                     'stat': Command_Stat(),
                     'jobs': Command_Jobs(),
                     'ls': Command_Ls(),
                     'cron': Command_Cron()}

    @classmethod
    def instance(cls):
        if cls._instance is None:
            cls._instance = CommandDispatcher()
        return cls._instance

    def get(self, command):
        cmd = command.split(None, 1)[0]
        if cmd not in self.map_:
            return None
        return self.map_[cmd]


class Master():
    def __init__(self, connection):
        self.connection = connection

    def do_command(self, cmd):
        dispatcher = CommandDispatcher.instance()
        handler = dispatcher.get(cmd)
        if handler is not None:
            try:
                msg = handler.prepare(cmd)
                self.connection.send(msg)
            except Exception as e:
                print("error: couldn't execute command")
                print(e)
        else:
            print("unknown command: " + cmd)


def print_help():
    print("Commands:")
    print("  run /path/to/file [<job_alias>] -- run job, which described in '.job' or '.meta' file")
    print("  stop <job_id>                   -- interrupt job execution")
    print("  stop <job_name>                 -- interrupt job/group of jobs execution")
    print("  stopg <group_id>                -- interrupt group of jobs execution")
    print("  stopall                         -- interrupt all job execution on all hosts")
    print("  add [<hostname> <groupname>]*   -- add host(s) with given hostname and hosts group name")
    print("  delete <hostname>               -- delete host(s)")
    print("  addg /path/to/file              -- add group of hosts, which described in a file")
    print("  deleteg <groupname>             -- delete group of hosts")
    print("  info <job_id>                   -- show job execution statistics")
    print("  stat                            -- show master statistics")
    print("  jobs                            -- show queued jobs info")
    print("  ls                              -- show workers info")
    print("  cron                            -- show cron jobs")
    print("  repeat, r                       -- repeat last entered command")
    print("  exit, e                         -- quit program")


def user_prompt():
    print("master admin v" + ADMIN_VERSION)
    print("print `help` for more information")


def parse_opt(argv):
    global MASTER_HOST
    global COMMAND
    try:
        opts, args = getopt.getopt(argv, "c:", ["command="])
        for opt in opts:
            if opt[0] in ("-c", "--command"):
                COMMAND = opt[1]
                print(COMMAND)
        for arg in args:
            MASTER_HOST = arg
            break
    except getopt.GetoptError:
        print('usage: prun [-c|--command <command>] [<master_host>]')
        sys.exit(1)


def exec_command(master, cmd):
    try:
        commands = cmd.split(';')
        for c in commands:
            c = c.strip()
            if len(c) > 0:
                commandName = c.split(None, 1)[0]
                if commandName == 'sleep':
                    print(c)
                    Command_Sleep().execute(c)
                else:
                    master.do_command(c)
    except Exception as e:
        print(e)


def user_input(master):
    try:
        lastCmd = None
        while True:
            sys.stdout.write('> ')
            sys.stdout.flush()

            line = sys.stdin.readline().strip()
            if len(line) == 0:
                continue

            if line in ("exit", "e", "quit", "q"):
                break
            if line == "help":
                print_help()
                continue
            if line in ("repeat", "r") and lastCmd is not None:
                line = lastCmd

            master.do_command(line)
            lastCmd = line
    except Exception as e:
        print(e)


def main(argv):
    parse_opt(argv)
    user_prompt()
    con = Connection()
    master = Master(con)

    if len(COMMAND) > 0:
        exec_command(master, COMMAND)
    else:
        user_input(master)

    con.close()

if __name__ == "__main__":
    main(sys.argv[1:])
